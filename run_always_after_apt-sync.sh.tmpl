{{ if ne .chezmoi.os "darwin" -}}
#!/usr/bin/env bash

# --- Unified, Intelligent, Dual-Trigger apt Script ---

# --- CONFIGURATION ---
# Set the time period in seconds. Default is 7 days.
readonly CHECK_INTERVAL_SECONDS=$((7 * 24 * 60 * 60))
# Location for the timestamp file.
readonly MARKER_FILE="$HOME/.config/aptfile/apt_last_run.txt"
# Location of the aptfile itself.
readonly APTFILE_PATH="$HOME/.config/aptfile/aptfile.txt"

# --- INITIAL CHECKS ---
if ! command -v apt &> /dev/null; then
    echo "ℹ️  apt not found, skipping."
    exit 0
fi
if [ ! -f "$APTFILE_PATH" ]; then
    echo "ℹ️  aptfile.txt not found, skipping."
    exit 0
fi

# --- DUAL-TRIGGER LOGIC ---
# This block decides if the main script logic needs to run.

# Default to not running. We'll set this to true if a condition is met.
SHOULD_RUN=false
RUN_REASON=""

# CONDITION 0: Force update via environment variable
APT_FORCE_LOWER=$(echo "$APT_FORCE_UPDATE" | tr '[:upper:]' '[:lower:]')
if [ "$APT_FORCE_LOWER" = "1" ] || [ "$APT_FORCE_LOWER" = "true" ] || [ "$APT_FORCE_LOWER" = "t" ]; then
    SHOULD_RUN=true
    RUN_REASON="Force update requested via APT_FORCE_UPDATE environment variable."
fi

# Helper function to get a file's modification time in seconds.
get_mtime() {
    date --reference="$1" +%s
}

# Always run if the timestamp marker file doesn't exist (i.e., first run).
if [ ! -f "$MARKER_FILE" ]; then
    SHOULD_RUN=true
    RUN_REASON="First run, performing initial sync."
else
    # Get the modification times of the aptfile and the last run marker.
    aptfile_mtime=$(get_mtime "$APTFILE_PATH")
    last_run_mtime=$(get_mtime "$MARKER_FILE")

    # CONDITION 1: Run if aptfile.txt has been changed since the last run.
    if (( aptfile_mtime > last_run_mtime )); then
        SHOULD_RUN=true
        RUN_REASON="aptfile.txt has been modified, re-syncing."
    fi

    # CONDITION 2: Run if the weekly time limit has passed.
    current_time=$(date +%s)
    elapsed_seconds=$((current_time - last_run_mtime))
    if (( elapsed_seconds > CHECK_INTERVAL_SECONDS )); then
        SHOULD_RUN=true
        # Use a more specific reason if the time check is what triggered it.
        if [ -z "$RUN_REASON" ]; then
            RUN_REASON="Periodic weekly check is due."
        fi
    fi
fi

# --- EXECUTION ---
# Based on the logic above, either run the full script or skip.

if [ "$SHOULD_RUN" = true ]; then
    echo "⌛ $RUN_REASON"

    # --- CORE SCRIPT ---
    echo "📦 Syncing packages from aptfile.txt..."

    # Update package lists
    sudo apt update -qq

    # Read aptfile and install packages (skip comments and empty lines)
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip comments and empty lines
        if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "$line" ]]; then
            continue
        fi

        # Install the package if not already installed
        pkg=$(echo "$line" | xargs)  # Trim whitespace
        if ! dpkg -l "$pkg" 2>/dev/null | grep -q "^ii"; then
            echo "  Installing $pkg..."
            sudo apt install -y -qq "$pkg"
        fi
    done < "$APTFILE_PATH"

    echo "✅ Package installation complete."

    # --- On success, update the timestamp to reset the timer ---
    echo "⏲️  Resetting the periodic timer."
    mkdir -p "$(dirname "$MARKER_FILE")"
    touch "$MARKER_FILE"

    echo "🎉 apt check complete."
else
    echo "ℹ️  Skipping apt check (up-to-date and last run was recent)."
    exit 0
fi
{{ end -}}
